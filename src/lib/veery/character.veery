
import "veery/abort" for Abort
import "veery/assert" for Assert
import "veery/magnitude" for Magnitude

class Character is Magnitude {
  static init_() {
    if (__enum != null) return
    __enum = {}

    (0..256).each {|codePoint| new_(codePoint) }
  }

  static new_(codePoint) { new_(codePoint,  String.fromCodePoint(codePoint)) }

  construct new_(codePoint, toString) {
    // TODO validation

    _codePoint = codePoint
    _toString  = toString

    __enum[_codePoint] = this
    __enum[_toString]  = this
  }

  static fromCodePoint(codePoint) {
    var c = __enum[codePoint]
    if (c != null) return c

    return new_(codePoint)
  }

  static fromEscapedString(escapedString) {
    return fromString(unescapeString_(escapedString))
  }

  static fromString(string) {
    var c = __enum[string]
    if (c != null) return c

    var codePoints = string.codePoints
    Assert.call(codePoints.count == 1, "invalid argument")
    var codePoint = codePoints[0]
    return new_(codePoint, string)
  }

  // Fixme should be part of String
  static unescapeString_(escapedString) {
    var string = ""

    var it
    var escapedStringCodePoints = escapedString.codePoints
    while (it = escapedStringCodePoints.iterate(it)) {
      var c = Character.fromCodePoint(escapedStringCodePoints.iteratorValue(it))

      if (c == '\\') {
        it = escapedStringCodePoints.iterate(it)
        c = Character.fromCodePoint(escapedStringCodePoints.iteratorValue(it))

        // TODO: make an static map for wellknown values
        if (c == '\\') {
          c = '\\'
        } else if (c == '"') {
          c = '"'
        } else if (c == '%') {
          c = '%'
        } else if (c == '\'') {
          c = '\''
        } else if (c == '0') {
          c = '\0'
        } else if (c == 'a') {
          c = '\a'
        } else if (c == 'b') {
          c = '\b'
        } else if (c == 'e') {
          c = '\e'
        } else if (c == 'f') {
          c = '\f'
        } else if (c == 'n') {
          c = '\n'
        } else if (c == 'r') {
          c = '\r'
        } else if (c == 't') {
          c = '\t'
/*
        } else if (c == 'u') {
          c = readUnicodeEscape(4)
        } else if (c == 'U') {
          c = readUnicodeEscape(8)
 */
        } else if (c == 'v') {
          c = '\v'
/*
        } else if (c == 'x') {
          c = (uint8_t)readHexEscape(parser, 2, "byte")
 */
        } else {
          Fiber.abort("Invalid escape character '%(c)'.")
        }
      }

      string = string + c.toString
    }

    return string
  }

  hash { Abort.todo() }

  codePoint { _codePoint }
  toString    { _toString  }

  ..(other) { Abort.todo() }
  ...(other) { Abort.todo() }

  isAlpha {
    return isLower ||
           isUpper ||
           this == '_'
  }

  isDigit { this >= '0' && this <= '9' }

  isAlphaNumeric { isAlpha || isDigit }

  isHexDigit {
    return isDigit ||
           this >= 'a' && this <= 'f' ||
           this >= 'A' && this <= 'F'
  }

  isLower { this >= 'a' && this <= 'z' }
  isUpper { this >= 'A' && this <= 'Z' }

//  <=>(other) { _codePoint <=> other.codePoint }
  ==(other) { other is Character && _codePoint == other.codePoint }
  < (other) { other is Character && _codePoint < other.codePoint }
}

Character.init_()
