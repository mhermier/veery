
import "veery/abort" for Abort;
import "veery/assert" for Assert;
import "veery/character" for Character;

class CharacterString {
  construct new_(characters, toString) {
    _characters = characters;
    _toString = toString;
  }

  static fromCharacters(characters) {
    return new_(characters.toList, // TODO ToList<Character>(characters)
                characters.join());
  }

  static fromString(string) {
    Assert.call(string is String, "Argument must be a string");

    var characters = []; // TODO: should reserve
    for (codePoint in string.codePoints) {
      characters.add(Character.fromCodePoint(codePoint));
    }
    return new_(characters, string);
  }

  [subscript] {
    if (subscript is Num) return _characters[subscript];
    if (subscript is Range) return CharacterString.fromCharacters(_characters[subscript]);

    Abort.runtime_error("Subscript must be a number or a range.");
  }

  ==(rhs) {
    if (rhs is Character) Abort.TODO();
    if (rhs is CharacterString) return toString == rhs.toString;
    if (rhs is String) return toString == rhs; // TODO: Remove compatibility ?

    Abort.runtime_error("Right hand side must be a character or a character string.");
  }
  !=(rhs) { !(this == rhs) }

  <(rhs) { Abort.TODO() }
  <=(rhs) { Abort.TODO() }
  >(rhs) { Abort.TODO() }
  >=(rhs) { Abort.TODO() }

  +(rhs) {
    if (rhs is Character) Abort.TODO();
    if (rhs is CharacterString) return CharacterString.fromCharacters(_characters + rhs.characters);
    if (rhs is String) return this + CharacterString.fromString(rhs); // TODO: Remove compatibility ?

    Abort.runtime_error("Right hand side must be a character or a character string.");
  }

  count { _characters.count }
  characters { _characters }
  isEmpty { _characters.count == 0 }

  toString { _toString }

  iterate(iterator) { _characters.iterate(iterator) }
  iteratorValue(iterator) { _characters.iteratorValue(iterator) }
}
