
import "io" for Stdin
import "os" for Platform

import "veery/argument_parser" for ArgumentParser;
import "veery/repl/repl" for AnsiRepl, SimpleRepl
import "veery/veery_version" for VEERY_VERSION_STRING;

class Shell {
  construct new() {}

  run(arguments) {
    var show_usage = false
    var show_version = false

    while (arguments.count > 0) {
      if (arguments[0] == "-h" || arguments[0] == "--help") {
        show_usage = true
      } else if (arguments[0] == "-v" || arguments[0] == "--version") {
        show_version = true
      } else if (arguments[0] == "--") {
        // End of options
        arguments = arguments[1..-1]
        break
    /*
      } else if (arguments[0] ~= "--*" || arguments[0] ~= "-?") {
        echo "${self} : Invalid option -- '$(echo "$1" | sed 's/^-\{1,2\}//')'" >&2
        echo "Try '${self} -h' for more information." >&2
      } else if (arguments[0] ~= "-*" || arguments[0] ~= "-?") {
        // Combined short options
        var split = arguments[0]
        arguments = arguments[1..-1]
        arguments.insert(0, "$(echo "${split}" | cut -c -2)")
        arguments.insert(1, "-$(echo "${split}" | cut -c 3-)")
        continue
    */
      } else {
        // Not an option
        break
      }
      arguments = arguments[1..-1]
    }

    if (show_usage) {
      System.print("Show usage")
      return 1
    }

    if (show_version) {
      System.print("Show version")
      return 1
    }

    if (arguments.count < 1 || arguments[0] != "--lang=wren") {
      System.print(arguments.join(", "))
      Fiber.abort("Properly implement arguments and language support")
    }

    System.print("\\\\/\"-")
    System.print(" \\_/   veery v%(VEERY_VERSION_STRING)")

    // Fire up the REPL. We use ANSI when talking to a POSIX TTY.
    if (Platform.isPosix && Stdin.isTerminal) {
      AnsiRepl.new().run()
    } else {
      // ANSI escape sequences probably aren't supported, so degrade.
      SimpleRepl.new().run()
    }
  }
}
