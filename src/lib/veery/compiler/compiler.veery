
import "io" for Directory, File

import "veery/abort" for Abort;
import "veery/argument_parser" for ArgumentParser;
import "veery/character_string" for CharacterString
import "veery/compiler/abstract_lang/identity_visitor" for IdentityVisitor;
import "veery/compiler/abstract_lang/source_file" for SourceFile
import "veery/compiler/abstract_lang/transform_visitor" for TransformVisitor
import "veery/compiler/compilation_context" for CompilationContext;
import "veery/compiler/reporter" for JsonReporter, PrettyReporter, Severity;
import "veery/compiler/warning" for Warning;
import "veery/veery_version" for VEERY_VERSION_STRING;

import "veery_lang/lexer" for Lexer
import "veery_lang/parser" for Parser

import "veery/compiler/abstract_lang/transform/constant_folding_transform/constant_folding_transform" for ConstantFoldingTransform
import "veery/compiler/abstract_lang/transform/character_transform" for CharacterTransform
import "wren_lang/source_printer" for SourcePrinter
import "wren_lang/transform/enum_transform" for EnumTransform
import "wren_lang/transform/strict_equality_transform" for StrictEqualityTransform
import "wren_lang/transform/this_module_transform" for ThisModuleTransform

import "veery/compiler/abstract_lang/validator/call_receiver_validator" for CallReceiverValidator

class Compiler {
  construct new () {
    _warnings = {};

    _generic_notice  = register_warning("notice",  "Generic notice report context",  Severity.Notice);
    _generic_warning = register_warning("warning", "Generic warning report context", Severity.Warning);
    _generic_error   = register_warning("error",   "Generic error report context",   Severity.Error);

    // TODO: Remove compatibility aliases
    _warnings[Severity.Warning] = _generic_warning;
    _warnings[Severity.Error]   = _generic_error;
  }

  // TODO: Add generic_warning(severity) to transform any severity to a Generic context?
  generic_notice  { _generic_notice }
  generic_warning { _generic_warning }
  generic_error   { _generic_error }

  warnings { _warnings }
  warning(name) { _warnings[name] }

  register_warning(name, desc, severity) {
    if (warning(name) != null) {
      Abort.internal_error("Already registered reporter context named: %(name)");
    }

    return _warnings[name] = Warning.new_(this, name, desc, severity);
  }

  parseFile(compilation_context, path) {
//    System.print("Parsing %(path)")
    var code = CharacterString.fromString(File.read(path))
    var source = SourceFile.new(path, code)

    var ast = _parser.parse(compilation_context, source);

//    var resolver = Resolver.new(_reporter)
//    resolver.resolve(ast)

    return ast
  }

  run(arguments) {
    var language;
    var reporter_class = PrettyReporter;

    var argument_parser = ArgumentParser.new {|argument_parser|
      argument_parser.program_name    = "veery compile";
      argument_parser.program_version = VEERY_VERSION_STRING;

      // Compatibility option: add some ouput format option
      argument_parser.add_option {|option|
        option.long_name = "json";
        option.help      = "Output result in json format";
        option.callback  = Fn.new {
          reporter_class = JsonReporter;
        }
      }

      argument_parser.add_option {|option|
        option.long_name = "lang";
        option.help      = "Change the language";
        option.arity     = 1;
        option.callback  = Fn.new {|result|
          // TODO Check values
          language = result.arguments_shift();
        }
      }
    }

    var result = argument_parser.parse(arguments);
    arguments = result.arguments;

    if (language != null) {
      System.print("Support other languages than veery");
      return 1;
    }

    // FIXME Handle arguments more gracefully
    if (arguments.count != 2) {
      System.print("Usage: veery-c <source file> <output file>")
      return 1
    }

    var pipeline = IdentityVisitor.new();

    // veery
    _parser = Parser.new(this);

    // wren
    if (true)  pipeline = pipeline | CharacterTransform.new();
    if (true)  pipeline = pipeline | EnumTransform.new();
    if (true)  pipeline = pipeline | StrictEqualityTransform.new();
    if (true)  pipeline = pipeline | ThisModuleTransform.new();

    // Optimization
    if (true)  pipeline = pipeline | ConstantFoldingTransform.new();

    // Output AST validation
    if (false) pipeline = pipeline | CallReceiverValidator.new();

    var compilation_context = CompilationContext.new(this, reporter_class.new());

    var path = arguments[0];
    var ast = parseFile(compilation_context, path);
    //System.print(ast);

    var file = File.create(arguments[1]);
    pipeline = pipeline | SourcePrinter.new(file);
    ast.accept(pipeline, compilation_context);
    file.close()

    if (compilation_context.has_errors) {
      System.print("Build has errors")
      return 1
    }
  }
}
