
import "veery/compiler/abstract_lang/ast" for CallExpr, ImportStmt, NumExpr
import "veery/compiler/abstract_lang/transform_visitor" for TransformVisitor

class CharacterTransform is TransformVisitor {
  construct new() {}

  visitModule(node) {
    node = super(node)
    if (_shouldImport) {
      // FIXME: Add an import node to "Character" if required
      var importNode = ImportStmt.new("veery/character", ["Character"])
    }
    return node
  }

  visitCharacterExpr(node) {
    _shouldImport = true

    node = super(node)
    var newNode = CallExpr.new(CallExpr.new(null,
                                            "Character",
                                            null,
                                            null),
                               "fromCodePoint",
                               [NumExpr.new(node.nativeValue.codePoint)],
                               null)
    return newNode
  }
}
