
import "veery/abort" for Abort

// TODO: Make it an interface

class AbstractVisitor {
  visit                        (node) { Abort.subclass_responsibility(.type) }

  visitBody                    (node) { .visit(node) }
  visitMapEntry                (node) { .visit(node) }
  visitMethod                  (node) { .visit(node) }
  visitModule                  (node) { .visit(node) }

  // Expressions.

  visitAssignmentExpr          (node) { .visit(node) }
  visitBoolExpr                (node) { .visit(node) }
  visitCallExpr                (node) { .visit(node) }
  visitCharacterExpr           (node) { .visit(node) }
  visitConditionalExpr         (node) { .visit(node) }
  visitFieldExpr               (node) { .visit(node) }
  visitGroupingExpr            (node) { .visit(node) }
  visitInfixExpr               (node) { .visit(node) }
  visitInterpolationExpr       (node) { .visit(node) }
  visitListExpr                (node) { .visit(node) }
  visitMapExpr                 (node) { .visit(node) }
  visitNullExpr                (node) { .visit(node) }
  visitNumExpr                 (node) { .visit(node) }
  visitPrefixExpr              (node) { .visit(node) }
  visitStaticFieldExpr         (node) { .visit(node) }
  visitStringExpr              (node) { .visit(node) }
  visitSubscriptExpr           (node) { .visit(node) }
  visitSuperExpr               (node) { .visit(node) }
  visitThisExpr                (node) { .visit(node) }
  visitThisModuleExpr          (node) { .visit(node) }

  // Statements.

  visitBlockStmt               (node) { .visit(node) }
  visitBreakStmt               (node) { .visit(node) }
  visitClassStmt               (node) { .visit(node) }
  visitContinueStmt            (node) { .visit(node) }
  visitForStmt                 (node) { .visit(node) }
  visitIfStmt                  (node) { .visit(node) }
  visitImportStmt              (node) { .visit(node) }
  visitReturnStmt              (node) { .visit(node) }
  visitVarStmt                 (node) { .visit(node) }
  visitWhileStmt               (node) { .visit(node) }
}
