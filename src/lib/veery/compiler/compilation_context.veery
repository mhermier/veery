
import "veery/compiler/reporter" for Severity;
import "veery/compiler/warning" for Warning;

class CompilationContext {
  construct new(compiler, reporter) {
    _compiler    = compiler;
    _reporter    = reporter;

    _error_count = 0;
  }

  compiler { _compiler }
  reporter { _reporter }

  has_errors  { _error_count > 0 }
  error_count { _error_count }

  // TODO: Remove
  call(severity, message, tokens) { .report(severity, message, tokens) }

  // TODO: Only support warning
  report(severity_or_warning, message, tokens) {
    var warning = severity_or_warning is Warning ?
        severity_or_warning : _compiler.warning(severity_or_warning);
    var severity = warning.severity;

    if (severity == Severity.None) {
      // Ignore suppressed report
      return
    }
    if (severity == Severity.Error) {
      _error_count = _error_count + 1;
    }

    _reporter.call(warning, message, tokens);
  }
}
