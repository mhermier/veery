
import "veery/collections/concepts/iterable" for Iterable
import "veery/memoize" for Memoize
import "veery/template" for Template

class Tuple {
  static [] {
    return __template[]
  }
  static [T0] {
    return __template[T0]
  }
  static [T0, T1] {
    return __template[T0, T1]
  }
  static [T0, T1, T2] {
    return __template[T0, T1, T2]
  }
  static [T0, T1, T2, T3] {
    return __template[T0, T1, T2, T3]
  }
  static [T0, T1, T2, T3, T4] {
    return __template[T0, T1, T2, T3, T4]
  }
  static [T0, T1, T2, T3, T4, T5] {
    return __template[T0, T1, T2, T3, T4, T5]
  }
  static [T0, T1, T2, T3, T4, T5, T6] {
    return __template[T0, T1, T2, T3, T4, T5, T6]
  }
  static [T0, T1, T2, T3, T4, T5, T6, T7] {
    return __template[T0, T1, T2, T3, T4, T5, T6, T7]
  }
  static [T0, T1, T2, T3, T4, T5, T6, T7, T8] {
    return __template[T0, T1, T2, T3, T4, T5, T6, T7, T8]
  }
  static [T0, T1, T2, T3, T4, T5, T6, T7, T8, T9] {
    return __template[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9]
  }
  static [T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10] {
    return __template[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]
  }
  static [T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11] {
    return __template[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]
  }
  static [T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12] {
    return __template[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]
  }
  static [T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13] {
    return __template[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]
  }
  static [T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14] {
    return __template[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]
  }
  static [T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15] {
    return __template[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]
  }

  static new() {
    return __classes[ 0].new()
  }
  static new(arg0) {
    return __classes[ 1].new(arg0)
  }
  static new(arg0, arg1) {
    return __classes[ 2].new(arg0, arg1)
  }
  static new(arg0, arg1, arg2) {
    return __classes[ 3].new(arg0, arg1, arg2)
  }
  static new(arg0, arg1, arg2, arg3) {
    return __classes[ 4].new(arg0, arg1, arg2, arg3)
  }
  static new(arg0, arg1, arg2, arg3, arg4) {
    return __classes[ 5].new(arg0, arg1, arg2, arg3, arg4)
  }
  static new(arg0, arg1, arg2, arg3, arg4, arg5) {
    return __classes[ 6].new(arg0, arg1, arg2, arg3, arg4, arg5)
  }
  static new(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
    return __classes[ 7].new(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
  }
  static new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
    return __classes[ 8].new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
  }
  static new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
    return __classes[ 9].new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
  }
  static new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
    return __classes[10].new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
  }
  static new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) {
    return __classes[11].new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
  }
  static new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) {
    return __classes[12].new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
  }
  static new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) {
    return __classes[13].new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
  }
  static new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) {
    return __classes[14].new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
  }
  static new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) {
    return __classes[15].new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
  }
  static new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15) {
    return __classes[16].new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
  }

  static fromAll(args) {
    return __classes[args.count].fromAll(args)
  }

  static veery_init_() {
    if (__template != null) return

    __template = Template.new() {|args|
      var type        = Template.makeTemplateClass("Tuple", args)
      var mangledName = type.mangledName
      var count       = args.count
      var Ts          = args

      var codeForArgs = ""
      if (count <= 16) {
        var funcArgs = type.veery_codeGenCallArgs(count)
        codeForArgs = "
          construct new(%(funcArgs)) {
            _data = List.filled(%(count), null)

            %((0...count).map {|i| "this[%(i)] = arg%(i)"}.join("\n            "))
          }
        "
      }

      var template = "
        #!implements(Iterable)
        class %(mangledName) is Tuple {
          %(type.veery_codeGenObject())

          static veery_init_() {
            __Ts = veery_type.args
          }

          static count { return %(count) }
          static valueTypes { return __Ts }

          %(codeForArgs)

          construct fromAll(seq) {
            implementMe
          }

          [subscript] { return _data[subscript] }

          [subscript] = (value) {
            // FIXME: Validate value type
            return _data[subscript] = value
          }

          count { return %(count) }

          // Satisfiy 'Sequenceable'
          iterate(it) { return _data.iterate(it) }
          iteratorValue(it) { return _data.iteratorValue(it) }
        }

        return %(mangledName)
      "

      var clazz = type.veery_Meta.compile(template).call()
      clazz.veery_type_ = type
      clazz.veery_init_()
      return clazz
    }

    __classes = Memoize.new {|size| __template.callAll(List.filled(size, Object)) }
  }
}

Tuple.veery_init_()
