
class HashMap {
  static []     { this[Object] }
  static [K]    { this[K, Object] }
  static [K, T] { __template.apply(K, T) }

  static init_() {
  if (__template != null) return

    __template = Template.new("Tuple") {|name, args|
        if (name.type != String || name == "") Fiber.abort("Name must be a non-empty string.")
        if (fields.isEmpty) Fiber.abort("A tuple must have at least one field.")

        var flds = fields.map { |f| "\"%(f)\"" }.join(", ")

        var s = "class %(env.name) is %(env.base_class.name) {\n"
        s = s + "    static fields { [%(flds)] }\n"
        s = s + "    construct new(%(fields.join(", "))) {\n"
        for (i in 0...fields.count) {
            var f = fields[i]
            s = s + "        _%(f) = %(f)\n"
        }
        s = s + "    }\n"
        s = s + fields.map { |f| "    %(f) { _%(f) }" }.join("\n") + "\n"
        s = s + "    toString { \"(" + fields.map { |f| "\%(_%(f))" }.join(", ") + ")\" }\n}\n"
        s = s + "return %(name)"
        return s
    }
}

HashMap.init_()

import "veery/abort" for Abort
import "veery/collection/map_entry" for Map_entry

class Hash_map {
  construct new() {}

  [key] {
    Abort.todo()
  }

  [key]=(value) {
    Abort.todo()
  }

  addCore_(key, value) {
    Abort.todo()
  }

  clear() {
    Abort.todo()
  }

  containsKey(key) {
    Abort.todo()
  }

  count {
    Abort.todo()
  }

  remove(key) {
    Abort.todo()
  }

  iterate(iterator) {
    Abort.todo()
  }

  keyIteratorValue_(iterator) {
    Abort.todo()
  }

  valueIteratorValue_(iterator) {
    Abort.todo()
  }

  keys { MapKeySequence.new(this) }
  values { MapValueSequence.new(this) }

  toString {
    var first = true
    var result = "{"

    for (key in keys) {
      if (!first) result = result + ", "
      first = false
      result = result + "%(key): %(this[key])"
    }

    return result + "}"
  }

  iteratorValue(iterator) {
    return Map_entry.new(
        keyIteratorValue_(iterator),
        valueIteratorValue_(iterator))
  }
}
