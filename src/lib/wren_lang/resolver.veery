import "veery/compiler/abstract_lang/ast" for
    AssignmentExpr,
    CallExpr,
    FieldExpr,
    StaticFieldExpr,
    SubscriptExpr;
import "veery/compiler/abstract_lang/recursive_visitor" for RecursiveVisitor;
import "veery/compiler/reporter" for Severity;

import "wren_lang/scope" for Scope;

// Walks a parsed AST and resolves identifiers.
class Resolver is RecursiveVisitor {
  construct new(reporter) {
    _reporter = reporter;
    _scope = Scope.new(reporter);
  }

  resolve(node, visitor_data) {
    node.accept(this, visitor_data);
  }

  visitModule(node, visitor_data) {
    // TODO: Implicitly import core.
    super(node, visitor_data);
    _scope.checkForwardReferences();
  }

//  visitMethod(node, visitor_data) { super(node, visitor_data) }

  visitBody(node, visitor_data) {
    _scope.begin();
    declareVariables(node.parameters);
    super(node, visitor_data);
    _scope.end();
  }

  // Expressions.

  visitAssignmentExpr(node, visitor_data) {
      var target_type = node.target.type;
      if (target_type == AssignmentExpr ||
          target_type == CallExpr ||
          target_type == FieldExpr ||
          target_type == StaticFieldExpr ||
          target_type == SubscriptExpr) {
        return;
      }
      _reporter.call(Severity.Error, "Invalid left argument type: %(node.target.type)", [node.equal]);
  }

//  visitBoolExpr(node, visitor_data) { super(node, visitor_data) }

  visitCallExpr(node, visitor_data) {
    // TODO: Resolve name if there is no receiver.
    if (node.receiver != null) {
      node.receiver.accept(this, visitor_data);
    } else {
      _scope.resolve(node.name);
    }

    // TODO: Error if name is a variable and we have arguments.

    if (node.arguments != null) {
      for (argument in node.arguments) {
        argument.accept(this, visitor_data);
      }
    }

    if (node.blockArgument != null) node.blockArgument.accept(this, visitor_data);
  }

//  visitConditionalExpr(node, visitor_data) { super(node, visitor_data) }

  // TODO: Make sure we're inside instance method.
//  visitFieldExpr(node, visitor_data) { super(node, visitor_data) }
//  visitGroupingExpr(node, visitor_data) { super(node, visitor_data) }

//  visitInfixExpr(node, visitor_data) { super(node, visitor_data) }
//  visitInterpolationExpr(node, visitor_data) { super(node, visitor_data) }
//  visitListExpr(node, visitor_data) { super(node, visitor_data) }
//  visitMapExpr(node, visitor_data) { super(node, visitor_data) }
//  visitNullExpr(node, visitor_data) { super(node, visitor_data) }
//  visitNumExpr(node, visitor_data) { super(node, visitor_data) }
//  visitPrefixExpr(node, visitor_data) { super(node, visitor_data) }
  // TODO: Make sure we're inside class.
//  visitStaticFieldExpr(node, visitor_data) { super(node, visitor_data) }
//  visitStringExpr(node, visitor_data) { super(node, visitor_data) }
//  visitSubscriptExpr(node, visitor_data) { super(node, visitor_data) }
//  visitThisExpr(node, visitor_data) { super(node, visitor_data) }

  // Statements.

  visitBlockStmt(node, visitor_data) {
    _scope.begin();
    super(node, visitor_data);
    _scope.end();
  }

  // TODO: Warn on dead code.
//  visitBreakStmt(node, visitor_data) { super(node, visitor_data) }

  visitClassStmt(node, visitor_data) {
    _scope.declare(node.name);
    _scope.beginClass();
    super(node, visitor_data);
    _scope.endClass();
  }

  visitForStmt(node, visitor_data) {
    _scope.begin();
    _scope.declare(node.variable);

    super(node, visitor_data);

    _scope.end();
  }

//  visitIfStmt(node, visitor_data) { super(node, visitor_data) }

  visitImportStmt(node, visitor_data) {
    declareVariables(node.variables);
    super(node, visitor_data);
  }

  // TODO: Warn on dead code.
//  visitReturnStmt(node, visitor_data) { super(node, visitor_data) }

  visitVarStmt(node, visitor_data) {
    _scope.declare(node.name);
    super(node, visitor_data);
  }

//  visitWhileStmt(node, visitor_data) { super(node, visitor_data) }

  // Declare [variables] in the current scope from the given list of name
  // tokens.
  declareVariables(variables) {
    if (variables == null) return;
    for (variable in variables) {
      _scope.declare(variable);
    }
  }
}
